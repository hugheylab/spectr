# Workflow derived from https://github.com/r-lib/actions/tree/master/examples
# Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help
on: [push, pull_request]

name: drat-deployment

jobs:
  drat-deployment:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      PKG_NAME: ${{ github.event.repository.name }}
      REPOSITORY_NAME: ${{ github.repository }}
      EVENT_NAME: ${{ github.event_name }}
      BRANCH_NAME: ${{ github.ref }}
      HEAD_REF: ${{ github.head_ref }}
      BASE_REF: ${{ github.base_ref }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ github.event.repository.name }}

      - name: Checkout drat repo
        uses: actions/checkout@v2
        with:
          repository: hugheylab/drat_testing
          path: drat

      - uses: r-lib/actions/setup-pandoc@v1

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true
      

      - name: Install dependencies
        run: |
          cd ${PKG_NAME}
          Rscript \
            -e 'install.packages(c("devtools", "BiocManager"))' \
            -e 'repos = BiocManager::repositories("https://hugheylab.github.io/drat/")' \
            -e 'devtools::install_dev_deps(dependencies = TRUE, repos = repos, upgrade = TRUE)' \
            -e 'install.packages("covr")'

      - name: Build Package
        run: |
          cd ${PKG_NAME}
          R CMD build . --md5

      - run: ls
      - run: ls ${PKG_NAME}
      - run: ls drat
      - run: echo ${{ github.ref }}

      - name: Set environmental variables 
        run: |
          cd ${PKG_NAME}
          Rscript \
            -e 'dsc = read.dcf("DESCRIPTION")' \
            -e 'system(sprintf("echo \"PKG_VERSION=%s\" >> $GITHUB_ENV", dsc[,"Version"]))' \
            -e 'system(sprintf("echo \"PKG_TARBALL=%s_%s.tar.gz\" >> $GITHUB_ENV", dsc[,"Package"], dsc[,"Version"]))'
          

      - name: Check to deploy
        if: ${{ endswith(github.ref, '/master') || endswith(github.ref, '/action-testing')  }}
        run: |
          cd ${PKG_NAME}
          echo "Version1: $PKG_VERSION"
          echo "Version2: ${PKG_VERSION}"
          echo "Tarball1: $PKG_TARBALL"
          echo "Tarball1: ${PKG_TARBALL}"
          cd ../drat
          FILE=src/contrib/${PKG_TARBALL}
          echo "File: $FILE."
          DEPLOYTARBALL=true
          if test -f "$FILE"
          then
            echo "Package tarball of current version exists on drat repo."
            mkdir ../tmpDir1
            tar xvzf "../$PKG_TARBALL" -C ../tmpDir1/
            sed -i '/DESCRIPTION$/d' ../tmpDir1/${PKG_NAME}/MD5
            sed -i '/build\/.*$/d' ../tmpDir1/${PKG_NAME}/MD5
            sed -i '/inst\/doc\/.*$/d' ../tmpDir1/${PKG_NAME}/MD5
            MD5FILECUR=$(cat ../tmpDir1/${PKG_NAME}/MD5)

            echo "Current MD5: $MD5FILECUR"

            sed -i '/Packaged:/d' ../tmpDir1/${PKG_NAME}/DESCRIPTION
            cd ../tmpDir1/
            SHADESC1=$(sha256sum ${PKG_NAME}/DESCRIPTION)
            cd ../drat

            mkdir ../tmpDir2
            tar xvzf "../drat/src/contrib/${PKG_TARBALL}" -C ../tmpDir2/

            echo "Checking for previous MD5 file."
            MD5FILE="../tmpDir2/${PKG_NAME}/MD5"

            if test -f "$MD5FILE"
            then
              echo "Found previous MD5 file."

              sed -i '/DESCRIPTION$/d' ../tmpDir2/${PKG_NAME}/MD5
              sed -i '/build\/.*$/d' ../tmpDir2/${PKG_NAME}/MD5
              sed -i '/inst\/doc\/.*$/d' ../tmpDir2/${PKG_NAME}/MD5
              MD5FILEPREV=$(cat ../tmpDir2/${PKG_NAME}/MD5)

              echo "Previous MD5: $MD5FILEPREV"

              sed -i '/Packaged:/d' ../tmpDir2/${PKG_NAME}/DESCRIPTION
              cd ../tmpDir2/
              SHADESC2=$(sha256sum ${PKG_NAME}/DESCRIPTION)
              cd ../drat

              echo "SHADESC1: $SHADESC1"
              echo "SHADESC2: $SHADESC2"

              cd ../tmpDir1
              SHATARBALLTMP=$(sha256sum ${PKG_NAME}/MD5)
              echo "SHATAR1: $SHATARBALLTMP"
              cd ../tmpDir2
              SHATARBALLGT=$(sha256sum ${PKG_NAME}/MD5)
              echo "SHATAR2: $SHATARBALLGT"
              cd ../drat

              if [ "$SHATARBALLGT" = "$SHATARBALLTMP" ] && [ "$SHADESC1" = "$SHADESC2" ]
              then
                echo "SHAs match, not deploying."
                DEPLOYTARBALL=false
              else
                echo "SHAs don't match, deploying."
              fi

            else
              echo "No MD5 file found, deploying."
            fi
          else
            echo "No tarball of current version exists on drat repo, deploying."
          fi

          if [ false ]
          then
            echo "Deploying."
            cd ../drat
            git config --global user.email "jakejhughey@gmail.com"
            git config --global user.name "Jake Hughey"
            Rscript \
              -e "install.packages('drat')" \
              -e "drat::insertPackage('../${PKG_TARBALL}', '.')"
            git add src/contrib/
            # git commit -m "Updated to ${PKG_NAME} $PKG_VERSION via GitHub Actions"
            # git push -q https://jakejh:${GITHUB_PAT}@github.com/hugheylab/drat_testing.git
          fi
